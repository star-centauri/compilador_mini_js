AQUI FICA MEUS RASCUNHOS DA GRAMATICA DO MINI JS
- Em JS temos o termos LET, CONST e VAR
- Comandos estruturados: if, while, for

Para variaveis:
LVALUE -> id
LVALUEPROP -> E [ E ]
LVALUEPROP -> E . id

E -> LVALUE = E 	    
  | LVALUEPROP = E 	
  | ...
  | LVALUE
  | LVALUEPROP
  
  Testar fazer:
  let a = {};
  
  
  
  
  CMDs : A { cout << endl; } CMDs   
     |  // Vazio, epsilon
     ;
     
CMD_IF : IF '(' E ')' {  }
     
F : ID
  | DOUBLE
  | (E)
  | STRING
  | BOOL
  | E[E]
  ;
  
------------------------------------------------------------------
GRAMATICA VARIAVEIS SIMPLES
S -> "let" E "=" F | "const" E "=" F | "var" E "=" F . { $$.c = $2.c + "@" + $2.c + $4.c + "=" + "^" }
     
E -> ID | ID.ID | ID[STRING] | ID[DOUBLE] .

F -> ID | NUM | DOUBLE | STRING | BOOL | [] | {} | E | (E) 



------------------------------------------------------------------------
"\n"/{WS}({DOUBLE}|{STRING}|{ID}|{BOOL}) {
						  if( ultimo_token == ID 
						   || ultimo_token == DOUBLE 
						   || ultimo_token == STRING
						   || ultimo_token == BOOL 
						   || ultimo_token == ')' 
						   || ultimo_token == ']' ) {
						    return token( ';' );
						  }
						 }.
---------------------------------------------------------------------------
S : CMDs { cout << $1.v << endl << "." << endl; }
  ;

CMDs : CMD CMDs { $$.v = $1.v + $2.v; }
     | CMD
     ;
     
CMD : CMD_LVALUE '=' CMD_RVALUE ';'      { $$.v = $1.v + " " + $3.v + " " + "= ^ "; }
    | CMD_LVALUE '=' CMD_RVALUE          { $$.v = $1.v + " " + $3.v + " " + "= ^ "; }
    | CMD_LVALUE_PROP '=' CMD_RVALUE ';' { $$.v = $1.v + " " + $3.v + " " + "[=] ^ "; }
    | CMD_LVALUE_PROP '=' CMD_RVALUE     { $$.v = $1.v + " " + $3.v + " " + "[=] ^ "; }
    ;
    
CMD_LVALUE : ID { $$.v = $1.v; };

CMD_LVALUE_PROP : ID '.' ID         { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' STRING ']' { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' INT ']'    { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' DOUBLE ']' { $$.v = $1.v + "@" + " " + $3.v; }
		 ;

CMD_RVALUE : ID { $$.v = $1.v + "@"; }
           | INT
           | DOUBLE
           | STRING
           | BOOL
           ;
---------------------------------------------------------------------------------------
S : CMDs { cout << $1.v << endl << "." << endl; }
  ;

CMDs : CMD CMDs { $$.v = $1.v + $2.v; }
     | CMD
     ;
     
CMD : CMD_DECLARACAO CMD_TERMINO { $$.v = $1.v + " " + $2.v + " " + "= ^ "; }
    | CMD_LVALUE CMD_TERMINO {}
    | CMD_FOR
    ;
    
CMD_DECLARACAO : VAR CMD_LVALUE   { $$.v = $2.v; }
               | LET CMD_LVALUE   { $$.v = $2.v; }
               | CONST CMD_LVALUE { $$.v = $2.v; }
               |
               ;

CMD_EXPRESSAO : ID {
			mkentr(0,indentifier,scope[stop-1]);
			printf("updating :%s scope:%d\n",indentifier,scope[stop-1]);
		    };
		| CMD_OPERACAO;

CMD_LVALUE : ID 
	   | ID ',' CMD_LVALUE 
	   | ID '=' CMD_RVALUE 
	   | ID '=' CMD_RVALUE ',' CMD_LVALUE
	   ;

CMD_RVALUE : ID { $$.v = $1.v + "@"; }
           | CMD_RVALUE '+' CMD_RVALUE
           | CMD_RVALUE '-' CMD_RVALUE
           | CMD_RVALUE '*' CMD_RVALUE
           | CMD_RVALUE '/' CMD_RVALUE
           | CMD_RVALUE OR CMD_RVALUE
           | CMD_RVALUE AND CMD_RVALUE
           | CMD_RVALUE EGUAL CMD_RVALUE
           | CMD_RVALUE NOT_EGUAL CMD_RVALUE
           | '(' CMD_RVALUE ')'
           | '-' CMD_RVALUE %prec UMINUS
           | INT
           | DOUBLE
           | STRING
           | BOOL
           ;
           
CMD_OPERACAO : '='
             | 
           
CMD_ITENS : CMD_EXPRESSAO ',' CMD_ITENS
          | CMD_EXPRESSAO;
           
CMD_FOR : FOR '(' CMD_DECLARACAO CMD_ITENS ';' CMD_ITENS ';' CMD_ITENS ')' CMD;
           
CMD_TERMINO : ';' 
            | '\n'
            ;
