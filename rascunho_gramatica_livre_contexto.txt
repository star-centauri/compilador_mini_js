AQUI FICA MEUS RASCUNHOS DA GRAMATICA DO MINI JS
- Em JS temos o termos LET, CONST e VAR
- Comandos estruturados: if, while, for

Para variaveis:
LVALUE -> id
LVALUEPROP -> E [ E ]
LVALUEPROP -> E . id

E -> LVALUE = E 	    
  | LVALUEPROP = E 	
  | ...
  | LVALUE
  | LVALUEPROP
  
  Testar fazer:
  let a = {};
  
  
  
  
  CMDs : A { cout << endl; } CMDs   
     |  // Vazio, epsilon
     ;
     
CMD_IF : IF '(' E ')' {  }
     
F : ID
  | DOUBLE
  | (E)
  | STRING
  | BOOL
  | E[E]
  ;
  
------------------------------------------------------------------------
"\n"/{WS}({DOUBLE}|{STRING}|{ID}|{BOOL}) {
						  if( ultimo_token == ID 
						   || ultimo_token == DOUBLE 
						   || ultimo_token == STRING
						   || ultimo_token == BOOL 
						   || ultimo_token == ')' 
						   || ultimo_token == ']' ) {
						    return token( ';' );
						  }
						 }.
---------------------------------------------------------------------------

S : CMDs { cout << $1.v + " " + "." << endl; }
  ;

CMDs : CMD ';' CMDs { 
                   $$.v = $1.v + $3.v; 
                   $$.c = concatena( $1.c, $3.c );
                }
     | { $$.v = ""; }
     ;
     
CMD : CMD_DECLARACOES {$$.v = $1.v; }
    | CMD_FOR { $$.v = $1.v; }
    | CMD_IF { $$.v = $1.v; }
    | CMD_WHILE { $$.v = $1.v; }
    ;
    
CMD_DECLARACOES : CMD_DECLARACAO '=' CMD_RVALUE  { $$.v = $1.v + " " + 
                                                               $3.v + " " + "= ^ "; }
                | CMD_DECLARACAO { $$.v = $1.v; }
                | CMD_DECLARACAO_PROP '=' CMD_RVALUE { $$.v = $1.v + " " + 
                                                                   $3.v + " " + "[=] ^ "; }
                ;
    
CMD_DECLARACAO : VAR CMD_LVALUE   { $$.v = $2.v; }
               | LET CMD_LVALUE   { $$.v = $2.v; }
               | CONST CMD_LVALUE { $$.v = $2.v; }
               | CMD_ATRIB { $$.v = $1.v; }
               ;
               
CMD_DECLARACAO_PROP : VAR CMD_LVALUE_PROP   { $$.v = $2.v; }
                    | LET CMD_LVALUE_PROP   { $$.v = $2.v; }
                    | CONST CMD_LVALUE_PROP { $$.v = $2.v; }
                    | CMD_LVALUE_PROP { $$.v = $1.v; }
                    ; 

CMD_LVALUE : ID {  $$.v = $1.v + "&" + " " + $1.v; }
           | ID ',' CMD_LVALUE { $$.v = $1.v + "&" + " " + $3.v + "&" + " ";  }
           ;
           
CMD_ATRIB : ID { $$.v = $1.v; } 
          | CMD_RVALUE
          ;
           
CMD_LVALUE_PROP : ID '.' ID         { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' STRING ']' { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' INT ']'    { $$.v = $1.v + "@" + " " + $3.v; }
		 | ID '[' DOUBLE ']' { $$.v = $1.v + "@" + " " + $3.v; }
		 ;


CMD_RVALUE : ID { $$.v = $1.v + "@"; }
           | CMD_RVALUE '^' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '<' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE EGUAL CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE NOT_EGUAL CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE MENOR_IGUAL CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE MAIOR_IGUAL CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE AND CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE OR CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '*' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '+' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '-' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '/' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '>' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | CMD_RVALUE '%' CMD_RVALUE { $$.v = $1.v + " " + $3.v + " " + $2.v; }
           | INT
           | DOUBLE
           | STRING
           | BOOL
           | '-' CMD_RVALUE %prec UMINUS
           | EMPTY_OBJ 
           | EMPTY_ARRAY
           | '(' CMD_RVALUE ')'
           ;
           
CMD_FOR : FOR '(' CMD ';' CMD_RVALUE ';' CMD_RVALUE ')' '{' CMD '}';

CMD_IF : IF '(' CMD_RVALUE ')' '{' CMD '}' ;
           
CMD_WHILE : WHILE '(' CMD_RVALUE ')' '{' CMD '}' {
					             $$.v = $3.v + " ! " + gera_label("end_while") +                                                         " ? " + $6.v + gera_label(":end_while");
                                                 }
          ;



http://www.inf.ufrgs.br/~johann/comp/lexyacc.pdf

------------------------------------------------------------------------------------------------------------------
void define_var( string var ) {
  if (vars.find( var ) != vars.end()){
    int var_ln = vars.find( var )->second;
    string msg = "a variável '" + var + "' já foi declarada na linha " + to_string(var_ln) + ".";
    erro(msg);
  }
  vars[var] = linha;
}
void checa_declarado( string var ) {
  if (vars.find( var ) == vars.end()){
    string msg = "a variável '" + var + "' não foi declarada.";
    erro(msg);
  }
  vars[var] = linha;
}

A : LVALUEPROP A { $$.v = $1.v + $2.v + eqq; checa_declarado($1.v[0]); }
  | R { $$.v = $1.v; } 
  | ',' A { $$.v = $2.v; checa_declarado($2.v[0]); }
  ;
